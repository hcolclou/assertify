{"version":3,"sources":["components/Navbar.js","components/Profile.js","components/TextPage.js","components/Resources.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","state","className","to","Component","Profile","fullName","userName","email","statsLabel","onClick","e","setState","statistics","this","class","TextPage","entry","onChange","target","value","onSubmit","preventDefault","console","log","noValidate","autoComplete","FormControl","InputLabel","htmlFor","Input","id","App","exact","path","component","Resources","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gSAwBeA,E,2MApBXC,MAAO,G,wEAIH,OACI,6BACI,yBAAKC,UAAU,qCACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,SACV,4BAAI,kBAAC,IAAD,CAAMC,GAAG,KAAT,SACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,eAAZ,YACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,cAAZ,sB,GAZXC,aCqDNC,G,iNApDXJ,MAAO,CACHK,SAAS,OACTC,SAAU,WACVC,MAAM,iBACNC,WAAY,mB,EAGhBC,QAAU,SAACC,GACsB,oBAA1B,EAAKV,MAAMQ,WACV,EAAKG,SAAS,CACVH,WAAY,oBAIhB,EAAKG,SAAS,CACVH,WAAY,qB,wEAOpB,IAAII,EAAa,8BAIjB,MAH6B,oBAA1BC,KAAKb,MAAMQ,aACVI,EAAa,gFAGb,yBAAKX,UAAU,aACX,yBAAKA,UAAU,8BACX,wBAAIA,UAAU,gBAAd,WACA,2BACI,0BAAMA,UAAU,QAAhB,SADJ,IACyCY,KAAKb,MAAMK,UAEpD,2BACA,0BAAMJ,UAAU,QAAhB,aADA,IACyCY,KAAKb,MAAMM,UAEpD,2BACA,0BAAML,UAAU,QAAhB,UADA,KACuCY,KAAKb,MAAMO,OAElD,yBAAKN,UAAU,gBACX,uBAAGA,UAAU,qDAAqDQ,QAASI,KAAKJ,SAC5E,uBAAGK,MAAM,uBAAT,gBACCD,KAAKb,MAAMQ,aAGnBI,Q,GA9CCT,c,wBC0CPY,E,2MAtCXf,MAAO,CACHgB,MAAO,I,EAGXC,SAAW,SAACP,GACR,EAAKC,SAAS,CACVK,MAAON,EAAEQ,OAAOC,S,EAIxBC,SAAW,SAACV,GACRA,EAAEW,iBAEFC,QAAQC,IAAI,EAAKvB,MAAMgB,Q,wEAIvB,OACI,yBAAKf,UAAU,iBACX,yBAAKA,UAAU,qCACf,0BAAMuB,YAAU,EAACC,aAAa,MAAML,SAAUP,KAAKO,UAC/C,kBAACM,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,oBAApB,SACA,kBAACC,EAAA,EAAD,CAAOC,GAAG,mBAAmBX,MAAON,KAAKb,MAAMgB,MAAOC,SAAUJ,KAAKI,SAAUG,SAAUP,KAAKO,aAGtG,uBAAGnB,UAAU,qDAAqDQ,QAASI,KAAKO,UAAhF,YAEA,yBAAKnB,UAAU,UACf,2C,GA9BOE,aCURJ,E,2MAbXC,MAAO,G,wEAKH,OACI,8C,GAPSG,aCuBN4B,E,iLAfX,OACE,kBAAC,IAAD,KACA,yBAAK9B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO+B,OAAK,EAACC,KAAK,IAAIC,UAAW9B,IACjC,kBAAC,IAAD,CAAO4B,OAAK,EAACC,KAAK,cAAcC,UAAWnB,IAC3C,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,aAAaC,UAAWC,W,GATlChC,aCIEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.39c22e42.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link, NavLink } from 'react-router-dom';\n\nclass Navbar extends Component {\n    state ={\n\n    }\n    render() {\n        return (\n            <div>\n                <nav className=\"nav-wrapper deep-purple lighten-1\">\n                    <div className=\"container\">\n                        <ul className=\"right\">\n                            <li><Link to=\"/\">Home</Link></li>\n                            <li><NavLink to=\"/translator\">TextBox</NavLink></li>\n                            <li><NavLink to=\"/resources\">Resources</NavLink></li>\n                        </ul>\n                    </div>\n                </nav>\n            </div>\n        )\n    }\n}\n\nexport default Navbar;","import React, { Component } from 'react';\nimport './Styles.css'\n\nclass Profile extends Component {\n    state ={\n        fullName:\"Lisa\",\n        userName: \"lisa1234\",\n        email:\"lisa@email.com\",\n        statsLabel: \"Show Statistics\"\n    }\n\n    onClick = (e) => {\n        if(this.state.statsLabel === \"Show Statistics\"){\n            this.setState({\n                statsLabel: \"Hide Statistics\"\n            })\n            \n        } else {\n            this.setState({\n                statsLabel: \"Show Statistics\"\n            })\n        }\n        \n    }\n\n    render() {\n        let statistics = <div/>\n        if(this.state.statsLabel === \"Hide Statistics\"){\n            statistics = <p>This will Show Statistics When the time is right</p>\n        }\n        return(\n            <div className=\"container\">\n                <div className=\"card deep-purple lighten-4\">\n                    <h4 className=\"center-align\">Profile</h4>\n                    <p>\n                        <span className=\"bold\">Name:</span> {this.state.fullName}\n                    </p>\n                    <p>\n                    <span className=\"bold\">UserName:</span> {this.state.userName}\n                    </p>\n                    <p>\n                    <span className=\"bold\">Email:</span>  {this.state.email}\n                    </p>\n                    <div className=\"center-align\">\n                        <a className=\"waves-effect btn deep-purple lighten-2 waves-light\" onClick={this.onClick}>\n                            <i class=\"material-icons left\">insert_chart</i>\n                            {this.state.statsLabel}\n                        </a>\n                    </div>\n                    {statistics}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Profile;","import React, { Component } from 'react';\nimport FormControl from '@material-ui/core/FormControl';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport './Styles.css'\n\nclass TextPage extends Component {\n    state ={\n        entry: \"\"\n    }\n\n    onChange = (e) => {\n        this.setState({\n            entry: e.target.value\n        })\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        // this.state.entry has the text input\n        console.log(this.state.entry)\n    }\n\n    render() {\n        return(\n            <div className=\"container row\">\n                <div className=\"card col s6 deep-purple lighten-4\">\n                <form noValidate autoComplete=\"off\" onSubmit={this.onSubmit}>\n                    <FormControl>\n                        <InputLabel htmlFor=\"component-simple\">Input</InputLabel>\n                        <Input id=\"component-simple\" value={this.state.entry} onChange={this.onChange} onSubmit={this.onSubmit}/>\n                    </FormControl>                \n                </form>\n                <a className=\"waves-effect btn deep-purple lighten-2 waves-light\" onClick={this.onSubmit}>Analyze</a>\n                </div>\n                <div className=\"col s6\">\n                <p>\n                    OUTPUT\n                </p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default TextPage;","import React, { Component } from 'react';\n\nclass Navbar extends Component {\n    state ={\n\n    }\n\n    render() {\n        return (\n            <div>\n                Resources\n            </div>\n        )\n    }\n}\n\nexport default Navbar;","import React, { Component } from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport Profile from './components/Profile';\nimport TextPage from './components/TextPage';\nimport Resources from './components/Resources';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n      <div className=\"App\">\n        <Navbar/>\n        <Switch>\n          <Route exact path=\"/\" component={Profile}/>\n          <Route exact path=\"/translator\" component={TextPage}/>\n          <Route exact path=\"/resources\" component={Resources} />\n        </Switch>\n      </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}